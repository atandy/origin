version: "3"

volumes:
  ipfs:

services:
  postgres:
    container_name: postgres
    restart: always
    image: postgres:10.0
    environment:
      - POSTGRES_USER=origin
      - POSTGRES_PASSWORD=origin
      - POSTGRES_DB=origin

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch
    build:
      context: .
      dockerfile: development/dockerfiles/elasticsearch
    ports:
      - "9200:9200"
    environment:
      network.bind_host: 0
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    logging:
      driver: none

  # NOTE/TODO: This container is only responsible for running ganache and IPFS,
  # this functionality should be moved to dedicated containers
  origin:
    container_name: origin
    image: origin
    build: .
    ports:
      - "8545:8545"  # Ganache
    volumes:
      # Addresses for deployment of contracts to local blockchain will get
      # written to the build files
      - ./origin-contracts/build:/app/origin-contracts/build
      - ./origin-contracts/migrations:/app/origin-contracts/migrations
      - ./origin-js/scripts:/app/origin-js/scripts
      - ./origin-js/package.json:/app/origin-js/package.json
      - ./origin-js/test:/app/origin-js/test
      - ./origin-js/src:/app/origin-js/src
    command: npm run start --prefix origin-js

  origin-ipfs-proxy:
    container_name: origin-ipfs-proxy
    image: origin
    ports:
      - "9999:9999"
    environment:
      - IPFS_API_URL=http://origin:5002
      - IPFS_GATEWAY_URL=http://origin:8080
    volumes:
      - ./origin-ipfs-proxy/src:/app/origin-ipfs-proxy/src
      - ./origin-ipfs-proxy/package.json:/app/origin-ipfs-proxy/package.json
    command: npm run start --prefix origin-ipfs-proxy

  origin-discovery:
    container_name: origin-discovery
    image: origin
    volumes:
      - ./origin-js/src:/app/origin-js/src
      - ./origin-discovery/src:/app/origin-discovery/src
      - ./origin-discovery/config:/app/origin-discovery/config
      - ./origin-discovery/package.json:/app/origin-discovery/package.json
    environment:
      - DATABASE_URL=postgres://origin:origin@postgres/origin
      - ELASTICSEARCH_HOST=elasticsearch:9200
    depends_on:
      - origin
      - postgres
      - elasticsearch
    ports:
      - "4000:4000"
    command: npm run start:discovery --prefix origin-discovery

  event-listener:
    container_name: event-listener
    image: origin
    volumes:
      - ./origin-contracts/build:/app/origin-contracts/build
      - ./origin-js/src:/app/origin-js/src
      - ./origin-discovery/src:/app/origin-discovery/src
      - ./origin-discovery/migrations:/app/origin-discovery/migrations
      - ./origin-discovery/config:/app/origin-discovery/config
      - ./development/envfiles/event-listener.env:/app/origin-discovery/.env
    depends_on:
      - origin
      - postgres
      - elasticsearch
      - origin-ipfs-proxy
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q origin:8080 --
      wait-for.sh -t 0 -q elasticsearch:9200 --
      npm run migrate --prefix origin-discovery &&
      npm run start:listener --prefix origin-discovery"

  origin-messaging:
    container_name: origin-messaging
    image: origin
    ports:
      - "9012:9012"
    volumes:
      - ./origin-messaging/src:/app/origin-messaging/src
      - ./origin-messaging/package.json:/app/origin-messaging/package.json
      - ipfs:/app/ipfs
    environment:
      - MESSAGING_NAMESPACE=dev
      - IPFS_REPO_PATH=/app/ipfs
    command: npm run start --prefix origin-messaging

  origin-bridge:
    container_name: origin-bridge
    image: origin-bridge
    build:
      context: .
      dockerfile: development/dockerfiles/origin-bridge
    volumes:
      - ./origin-bridge:/app
      # Set the envfile from the local envfile
      - ./development/envfiles/origin-bridge.env:/app/.env
    depends_on:
      - postgres
    environment:
      - FLASK_APP=/app/main.py
      - FLASK_DEBUG=True
      - PYTHONUNBUFFERED=1
    ports:
      - "5000:5000"
    command: /bin/bash -c "flask db upgrade && flask run --host=0.0.0.0"

  origin-notifications:
    container_name: origin-notifications
    image: origin
    volumes:
      - ./origin-notifications/src:/app/origin-notifications/src
      - ./origin-notifications/migrations:/app/origin-notifications/migrations
      - ./origin-notifications/package.json:/app/origin-notifications/package.json
      - ./development/envfiles/origin-notifications.env:/app/origin-notifications/.env
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgres://origin:origin@postgres/origin
    ports:
      - "3456:3456"
    command:
      >
      /bin/bash -c "wait-for.sh -t 0 -q postgres:5432 --
      npm run migrate --prefix origin-notifications &&
      npm run start --prefix origin-notifications"

  origin-dapp:
    container_name: origin-dapp
    image: origin
    volumes:
      # Include origin-contracts build files so the DApp has access to the
      # address of the contracts on the local blockchain
      - ./origin-contracts/build:/app/origin-contracts/build
      - ./origin-js/src:/app/origin-js/src
      # Mount origin-dapp inside the container
      - ./origin-dapp/src:/app/origin-dapp/src
      - ./origin-dapp/public:/app/origin-dapp/public
      - ./origin-dapp/translations:/app/origin-dapp/translations
      - ./origin-dapp/webpack.config.js:/app/origin-dapp/webpack.config.js
      - ./origin-dapp/package.json:/app/origin-dapp/package.json
      # Set the envfile from the local envfile
      - ./development/envfiles/origin-dapp.env:/app/origin-dapp/.env
      - ipfs:/app/ipfs
    depends_on:
      - origin-ipfs-proxy
      - event-listener
      - origin
      - origin-discovery
      - origin-messaging
      - origin-bridge
      - origin-notifications
    ports:
      - "3000:3000"
    command:
      # Waits for origin-messaging to start then uses a script to read the
      # origin-messaging IPFS peer id and write the configuration key/pair to
      # the .env file.
      >
      /bin/bash -c "wait-for.sh -t 0 -q origin-messaging:9012 &&
      . set-ipfs-swarm.sh /app/ipfs/config &&
      wait-for.sh -t 0 -q origin:8080 --
      npm run start --prefix origin-dapp"
